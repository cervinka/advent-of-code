# Day 13

## Setup

https://adventofcode.com/2021/day/13

```elixir
Mix.install([
  {:kino, "~> 0.4.1"},
  {:vega_lite, "~> 0.1.2"}
])
```

```elixir
input = Kino.Input.textarea("Your input here:")
```

```elixir
[points_text, folds_texts] =
  input
  |> Kino.Input.read()
  |> String.split("\n\n", trim: true)

points =
  points_text
  |> String.split("\n", trim: true)
  |> Enum.map(fn line ->
    [x, y] = String.split(line, ",")
    {String.to_integer(x), String.to_integer(y)}
  end)

folds =
  folds_texts
  |> String.split("\n", trim: true)
  |> Enum.map(fn <<"fold along ", axe, "=", fold::binary>> ->
    {String.to_atom(<<axe>>), String.to_integer(fold)}
  end)
```

```elixir
defmodule Origami do
  def print(points) do
    {cols, rows} = dimensions(points)
    grid = Enum.reduce(points, %{}, fn pos, grid -> Map.put(grid, pos, true) end)

    for y <- 0..(rows - 1) do
      for(x <- 0..(cols - 1), do: if(Map.get(grid, {x, y}, false), do: ' # ', else: '   '))
      |> IO.puts()
    end

    grid
  end

  def dimensions(points) do
    {x, _} = Enum.max_by(points, fn {x, _} -> x end)
    {_, y} = Enum.max_by(points, fn {_, y} -> y end)
    {x + 1, y + 1}
  end

  def fold([], points), do: points

  def fold([fold | folds], points) do
    fold(folds, fold_once(fold, points))
  end

  def fold_once({dir, edge}, points) do
    Enum.map(points, fn {x, y} ->
      case dir do
        :x -> {edge - abs(x - edge), y}
        :y -> {x, edge - abs(y - edge)}
      end
    end)
  end
end
```

## Part 1

```elixir
folds
|> Enum.take(1)
|> Origami.fold(points)
|> length()
```

## Part 2

```elixir
folds
|> Origami.fold(points)
|> Origami.print()
```
